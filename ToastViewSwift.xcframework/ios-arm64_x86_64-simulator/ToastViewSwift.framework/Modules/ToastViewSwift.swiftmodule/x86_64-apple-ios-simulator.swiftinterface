// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8 (swiftlang-5.8.0.124.2 clang-1403.0.22.11.100)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ToastViewSwift
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
import Swift
@_exported import ToastViewSwift
import UIKit
import _Concurrency
import _StringProcessing
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class AppleToastView : UIKit.UIView, ToastViewSwift.ToastView {
  @_Concurrency.MainActor(unsafe) public init(child: UIKit.UIView, minHeight: CoreFoundation.CGFloat = 58, minWidth: CoreFoundation.CGFloat = 150, darkBackgroundColor: UIKit.UIColor = UIColor(red: 0.13, green: 0.13, blue: 0.13, alpha: 1.00), lightBackgroundColor: UIKit.UIColor = UIColor(red: 0.99, green: 0.99, blue: 0.99, alpha: 1.00))
  @_Concurrency.MainActor(unsafe) public func createView(for toast: ToastViewSwift.Toast)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class IconAppleToastView : UIKit.UIStackView {
  @_Concurrency.MainActor(unsafe) public static var defaultImageTint: UIKit.UIColor {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(image: UIKit.UIImage, imageTint: UIKit.UIColor? = defaultImageTint, title: Foundation.NSAttributedString, subtitle: Foundation.NSAttributedString? = nil)
  @_Concurrency.MainActor(unsafe) public init(image: UIKit.UIImage, imageTint: UIKit.UIColor? = defaultImageTint, title: Swift.String, subtitle: Swift.String? = nil)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class TextToastView : UIKit.UIStackView {
  @_Concurrency.MainActor(unsafe) public init(_ title: Foundation.NSAttributedString, subtitle: Foundation.NSAttributedString? = nil)
  @_Concurrency.MainActor(unsafe) public init(_ title: Swift.String, subtitle: Swift.String? = nil)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Toast {
  public enum Direction {
    case top, bottom
    public static func == (a: ToastViewSwift.Toast.Direction, b: ToastViewSwift.Toast.Direction) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum AnimationType {
    case slide(x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat)
    case fade(alphaValue: CoreFoundation.CGFloat)
    case scaleAndSlide(scaleX: CoreFoundation.CGFloat, scaleY: CoreFoundation.CGFloat, x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat)
    case scale(scaleX: CoreFoundation.CGFloat, scaleY: CoreFoundation.CGFloat)
    case custom(transformation: CoreFoundation.CGAffineTransform)
    case `default`
  }
  public static var defaultImageTint: UIKit.UIColor {
    get
  }
  final public let view: any ToastViewSwift.ToastView
  weak public var delegate: (any ToastViewSwift.ToastDelegate)?
  public static func text(_ title: Foundation.NSAttributedString, subtitle: Foundation.NSAttributedString? = nil, config: ToastViewSwift.ToastConfiguration = ToastConfiguration()) -> ToastViewSwift.Toast
  public static func text(_ title: Swift.String, subtitle: Swift.String? = nil, config: ToastViewSwift.ToastConfiguration = ToastConfiguration()) -> ToastViewSwift.Toast
  public static func `default`(image: UIKit.UIImage, imageTint: UIKit.UIColor? = defaultImageTint, title: Foundation.NSAttributedString, subtitle: Foundation.NSAttributedString? = nil, config: ToastViewSwift.ToastConfiguration = ToastConfiguration()) -> ToastViewSwift.Toast
  public static func `default`(image: UIKit.UIImage, imageTint: UIKit.UIColor? = defaultImageTint, title: Swift.String, subtitle: Swift.String? = nil, config: ToastViewSwift.ToastConfiguration = ToastConfiguration()) -> ToastViewSwift.Toast
  public static func custom(view: any ToastViewSwift.ToastView, config: ToastViewSwift.ToastConfiguration = ToastConfiguration()) -> ToastViewSwift.Toast
  required public init(view: any ToastViewSwift.ToastView, config: ToastViewSwift.ToastConfiguration)
  public func show(haptic type: UIKit.UINotificationFeedbackGenerator.FeedbackType, after time: Foundation.TimeInterval = 0)
  public func show(after delay: Foundation.TimeInterval = 0)
  public func close(completion: (() -> Swift.Void)? = nil)
  @objc deinit
}
extension ToastViewSwift.Toast {
  public func enableTapToClose()
  @objc dynamic public func toastOnTap(_ gesture: UIKit.UITapGestureRecognizer)
}
public struct ToastConfiguration {
  public let direction: ToastViewSwift.Toast.Direction
  public let autoHide: Swift.Bool
  public let enablePanToClose: Swift.Bool
  public let displayTime: Foundation.TimeInterval
  public let animationTime: Foundation.TimeInterval
  public let enteringAnimation: ToastViewSwift.Toast.AnimationType
  public let exitingAnimation: ToastViewSwift.Toast.AnimationType
  public let view: UIKit.UIView?
  public init(direction: ToastViewSwift.Toast.Direction = .top, autoHide: Swift.Bool = true, enablePanToClose: Swift.Bool = true, displayTime: Foundation.TimeInterval = 4, animationTime: Foundation.TimeInterval = 0.2, enteringAnimation: ToastViewSwift.Toast.AnimationType = .default, exitingAnimation: ToastViewSwift.Toast.AnimationType = .default, attachTo view: UIKit.UIView? = nil)
}
public protocol ToastDelegate : AnyObject {
  func willShowToast(_ toast: ToastViewSwift.Toast)
  func didShowToast(_ toast: ToastViewSwift.Toast)
  func willCloseToast(_ toast: ToastViewSwift.Toast)
  func didCloseToast(_ toast: ToastViewSwift.Toast)
}
public protocol ToastView : UIKit.UIView {
  func createView(for toast: ToastViewSwift.Toast)
}
extension ToastViewSwift.Toast.Direction : Swift.Equatable {}
extension ToastViewSwift.Toast.Direction : Swift.Hashable {}
